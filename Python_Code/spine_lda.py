# -*- coding: utf-8 -*-
"""spine lda (1).ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1PS0eQq-qcxs5FFutIe298qw96jIdNhW6
"""
# Third Step
# Author: David Burns
# License: BSD
import os
os.environ["CUDA_DEVICE_ORDER"] = "PCI_BUS_ID"   # see issue #152
os.environ["CUDA_VISIBLE_DEVICES"] = ""
import re
import matplotlib.pyplot as plt
import matplotlib.image as mpimg
import numpy as np
import pandas as pd
from sklearn.discriminant_analysis import LinearDiscriminantAnalysis
import seglearn as sgl

from tensorflow.python.keras.layers import Dense, LSTM, Conv1D
from tensorflow.python.keras.models import Sequential
from tensorflow.python.keras.wrappers.scikit_learn import KerasClassifier
from sklearn.model_selection import train_test_split

def plot_embedding(emb, y, y_labels):
    # plot a 2D feature map embedding
    x_min, x_max = np.min(emb, 0), np.max(emb, 0)
    emb = (emb - x_min) / (x_max - x_min)

    NC = len(y_labels)
    markers = ['o','o','o','x','o','o','x','o','x','o','o','x','x',
    'o','x','o','x','o','x','o','x','o','o']

    fig = plt.figure()
    fig.set_size_inches(6, 6)

    for c in range(NC):
        i = y == c
        plt.scatter(emb[i, 0], emb[i, 1], marker=markers[c], label=y_labels[c]) #marker=markers[c],

    plt.xticks([]), plt.yticks([])
    plt.legend()
    plt.tight_layout()



def crnn_model(width=100, n_vars=6, n_classes=7, conv_kernel_size=5,
               conv_filters=3, lstm_units=3):
    input_shape = (width, n_vars)
    model = Sequential()
    model.add(Conv1D(filters=conv_filters, kernel_size=conv_kernel_size,
                     padding='valid', activation='relu', input_shape=input_shape))
    model.add(Conv1D(filters=conv_filters, kernel_size=conv_kernel_size,
                     padding='valid', activation='relu'))
    model.add(LSTM(units=lstm_units, dropout=0.1, recurrent_dropout=0.1))
    model.add(Dense(n_classes, activation="softmax"))

    model.compile(loss='categorical_crossentropy', optimizer='adam',
                  metrics=['accuracy'])

    return model



# load the data
X = []
cases = []
#cases = ['4','14','22','23','25','55','61','66','69','71']
directory_in_str = '0Months/'
directory = os.fsencode(directory_in_str)
for file in os.listdir(directory):
    #fname = '0Months/Case' + c + '.txt'
    filename = os.fsdecode(file)
    if filename.endswith(".txt"):
        npa = np.genfromtxt(directory_in_str+filename, delimiter=',', dtype=np.float64, usecols=range(1,9))
        print("loaded case " + filename + " with shape ", npa.shape, ", dtype: ", npa.dtype)
        X.append(npa)
        cases.append(re.findall('\d+', filename))   
        continue
    else:
        print("Ignored A file")
        continue
y = [0,0,0,1]#,0,0,1,0,1,0,0,1,1,0,1,0,1,0,1,0,1,0,0] ##np.arange(len(X))#[0 ,1] 

# # create a pipeline for LDA transformation of the feature representation
clf = sgl.Pype([('segment', sgl.SegmentX(width=10000)),
                ('ftr', sgl.FeatureRep()),
                ('crnn', KerasClassifier(build_fn=crnn_model, epochs=1, batch_size=256, verbose=0))])#features=sgl.feature_functions.emg_features()
#('lda', LinearDiscriminantAnalysis(n_components=2))])
#X2, y2 = clf.fit_transform(X, y)
#plot_embedding(X2, y2.astype(int), cases) #
#plt.show()
# split the data
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.25, random_state=42)


clf.fit(X_train, y_train)
score = clf.score(X_test, y_test)

print("N series in train: ", len(X_train))
print("N series in test: ", len(X_test))
print("N segments in train: ", clf.N_train)
print("N segments in test: ", clf.N_test)
print("Accuracy score: ", score)

#img = mpimg.imread('segments.jpg')
#plt.imshow(img)